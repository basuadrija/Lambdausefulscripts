import boto3

def lambda_handler(event, context):
    # Extract parameters from the event
    auto_scaling_group_name = event.get('auto_scaling_group_name')
    instance_ids = event.get('instance_ids', [])

    if not auto_scaling_group_name:
        return {
            'statusCode': 400,
            'message': "Auto Scaling group name is required in the event payload."
        }

    # Initialize AWS clients
    ec2_client = boto3.client('ec2')
    autoscaling_client = boto3.client('autoscaling')

    try:
        # Describe the Auto Scaling group to get current configuration
        response = autoscaling_client.describe_auto_scaling_groups(
            AutoScalingGroupNames=[auto_scaling_group_name]
        )
        auto_scaling_group = response['AutoScalingGroups'][0]
        current_min_size = auto_scaling_group['MinSize']
        current_desired_capacity = auto_scaling_group['DesiredCapacity']
        current_max_size = auto_scaling_group['MaxSize']

        # Get the instance IDs if not provided
        if not instance_ids:
            instance_ids = [i['InstanceId'] for i in auto_scaling_group['Instances']]
       
        print(f"Instances in Auto Scaling group '{auto_scaling_group_name}': {instance_ids}")

        if not instance_ids:
            return {
                'statusCode': 200,
                'message': "No instances found in the specified Auto Scaling group."
            }

        # Calculate new capacities
        new_desired_capacity = max(current_desired_capacity - len(instance_ids), 0)
        new_min_size = max(current_min_size - len(instance_ids), 0)

        # Suspend scaling processes
        autoscaling_client.suspend_processes(
            AutoScalingGroupName=auto_scaling_group_name,
            ScalingProcesses=['Launch', 'Terminate', 'ReplaceUnhealthy', 'AZRebalance']
        )
        print(f"Scaling processes suspended for Auto Scaling group '{auto_scaling_group_name}'.")

        # Update Auto Scaling group sizes to avoid violations
        autoscaling_client.update_auto_scaling_group(
            AutoScalingGroupName=auto_scaling_group_name,
            MinSize=new_min_size,
            DesiredCapacity=new_desired_capacity,
            MaxSize=max(new_desired_capacity, current_max_size)
        )
        print(f"Updated Auto Scaling group '{auto_scaling_group_name}' sizes: "
              f"MinSize={new_min_size}, DesiredCapacity={new_desired_capacity}")

        # Detach instances without decrementing desired capacity
        detach_response = autoscaling_client.detach_instances(
            InstanceIds=instance_ids,
            AutoScalingGroupName=auto_scaling_group_name,
            ShouldDecrementDesiredCapacity=False
        )
        print(f"Instances detached from Auto Scaling group: {detach_response}")

        # Stop the detached instances
        stop_response = ec2_client.stop_instances(InstanceIds=instance_ids)
        print(f"Stopping instances: {stop_response}")

        return {
            'statusCode': 200,
            'message': f"Instances {instance_ids} detached, stopped, and scaling processes suspended. "
                       f"MinSize and DesiredCapacity updated to avoid termination."
        }
    except Exception as e:
        print(f"Error: {e}")
        return {
            'statusCode': 500,
            'message': f"An error occurred: {str(e)}"
        }